{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6ebe3b53-0fce-4eac-a7d5-6a113c3ab976",
   "metadata": {},
   "source": [
    "## Download Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bc33a9f-83d5-47ab-a4b7-8e4a65f81a6f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "!wget https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DL0321EN/data/concrete_data_week4.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "287aac33-867b-4467-8945-8d16821b9662",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "!unzip concrete_data_week4.zip"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5788b353-b079-4782-bd1b-17ff25747097",
   "metadata": {},
   "source": [
    "## Part 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f42e088-595e-4521-8e0e-8fd8907a9986",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.applications import VGG16\n",
    "from tensorflow.keras.applications.vgg16 import preprocess_input\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a2d0f59-821b-47b9-96e4-faf286285c80",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Путь к директориям с тренировочными и проверочными данными\n",
    "train_dir = 'DL0321EN/labs/Week3/concrete_data_week3/train'\n",
    "validation_dir= 'DL0321EN/labs/Week3/concrete_data_week3/valid'\n",
    "\n",
    "# Создаем генераторы данных для тренировки и проверки\n",
    "train_datagen = ImageDataGenerator(\n",
    "    preprocessing_function=preprocess_input,\n",
    "    rescale=1./255,\n",
    "    shear_range=0.2,\n",
    "    zoom_range=0.2,\n",
    "    horizontal_flip=True)\n",
    "\n",
    "validation_datagen = ImageDataGenerator(\n",
    "    preprocessing_function=preprocess_input,\n",
    "    rescale=1./255)\n",
    "\n",
    "# Генераторы данных\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_dir,\n",
    "    target_size=(224, 224),\n",
    "    batch_size=100,\n",
    "    class_mode='categorical')\n",
    "\n",
    "validation_generator = validation_datagen.flow_from_directory(\n",
    "    validation_dir,\n",
    "    target_size=(224, 224),\n",
    "    batch_size=100,\n",
    "    class_mode='categorical')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03fd90ca-6f4f-4e10-b7a1-5d24645a5490",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Загружаем предобученную модель VGG16 без верхних слоев (полносвязных слоев)\n",
    "vgg16_base = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
    "\n",
    "# Создаем новую модель\n",
    "model = Sequential()\n",
    "\n",
    "# Добавляем VGG16 как основу\n",
    "model.add(vgg16_base)\n",
    "\n",
    "# Добавляем слои классификации\n",
    "model.add(Flatten())\n",
    "model.add(Dense(256, activation='relu'))\n",
    "model.add(Dense(train_generator.num_classes, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94557906-1890-4afc-ac76-9ebc96192232",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer=Adam(),\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb9d39e2-66b8-440e-90c2-e00382da0aef",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.fit(\n",
    "    train_generator,\n",
    "    steps_per_epoch=train_generator.samples // 100,\n",
    "    validation_data=validation_generator,\n",
    "    validation_steps=validation_generator.samples // 100,\n",
    "    epochs=10)  # Количество эпох можно настроить\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3914e3fc-333f-42a3-ab94-0b6b6d8ede89",
   "metadata": {},
   "source": [
    "## Part 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0be346bc-f6ff-4f02-84cb-1145287a3eda",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import load_model\n",
    "\n",
    "# Загрузка сохраненной модели ResNet50\n",
    "resnet50_model = load_model('resnet50_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "960f82a0-1733-4728-bcd7-8e98ed85d513",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "# Создаем генератор для тестового набора\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)  # Нормализация значений пикселей\n",
    "\n",
    "# Путь к директории с тестовыми данными\n",
    "test_dir = 'path_to_test_data'\n",
    "\n",
    "# Генератор данных для тестового набора\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "    test_dir,\n",
    "    target_size=(224, 224),  # Размер изображений, соответствующий модели\n",
    "    batch_size=100,\n",
    "    class_mode='categorical',\n",
    "    shuffle=False)  # shuffle=False для оценки на тестовом наборе\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3313efa5-20d5-48b9-95a5-133481ffa299",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "# Создаем генератор для тестового набора\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)  # Нормализация значений пикселей\n",
    "\n",
    "# Путь к директории с тестовыми данными\n",
    "test_dir = 'path_to_test_data'\n",
    "\n",
    "# Генератор данных для тестового набора\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "    test_dir,\n",
    "    target_size=(224, 224),  # Размер изображений, соответствующий модели\n",
    "    batch_size=100,\n",
    "    class_mode='categorical',\n",
    "    shuffle=False)  # shuffle=False для оценки на тестовом наборе\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a998cdc-116c-4e22-8700-fd06ced1e2ad",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Оценка модели ResNet50\n",
    "resnet50_performance = resnet50_model.evaluate(test_generator)\n",
    "print(f\"Производительность классификатора на основе ResNet50: Потери = {resnet50_performance[0]}, Точность = {resnet50_performance[1]}\")\n",
    "\n",
    "# Предположим, что у вас также есть сохраненная модель VGG16, загружаем и оцениваем ее\n",
    "vgg16_model = load_model('vgg16_model.h5')\n",
    "\n",
    "# Оценка модели VGG16\n",
    "vgg16_performance = vgg16_model.evaluate(test_generator)\n",
    "print(f\"Производительность классификатора на основе VGG16: Потери = {vgg16_performance[0]}, Точность = {vgg16_performance[1]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "897d6c9d-73b5-4f30-b571-2a7bd1ccbe80",
   "metadata": {},
   "source": [
    "## Part3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e93ffce1-148d-4f64-8706-dd5049ece2b2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Предположим, что у вас загружена модель VGG16 или ResNet50\n",
    "# Используем модель ResNet50, например\n",
    "predictions = resnet50_model.predict(test_generator)\n",
    "\n",
    "# Предсказания будут в виде вероятностей для каждого класса\n",
    "# Аргументируем наибольшую вероятность для каждого изображения\n",
    "predicted_classes = predictions.argmax(axis=-1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb900da8-a442-4068-804a-d7adafcedd51",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Предполагается, что у вас всего два класса: Positive (1) и Negative (0)\n",
    "class_labels = {0: 'Negative', 1: 'Positive'}\n",
    "\n",
    "# Выводим предсказания для первых пяти изображений\n",
    "for i in range(5):\n",
    "    print(class_labels[predicted_classes[i]])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69c136a7-c876-478f-a9b2-15ee9fd33019",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Positive\n",
    "Negative\n",
    "Positive\n",
    "Positive\n",
    "Negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7950a6de-63a3-4f4e-b090-95aef9223c5d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
